$(function() {

    /*
    function random(n){
        return (Math.random() * n >> 0);
    }
    function next(color, x){
        return (color + x) % 4;
    }
    function color(color){
        return theme[color];
    }

    var BallModel = Backbone.Model.extend({
        defaults: function(){
            return {
                text: "",
                color: random(4) + 1,
                size: random(100) + 20,
                x: random(window.innerWidth),
                y: random(-200),
                on: false,
                hover: false
            };
        },
        toggle: function(){ this.set("on", !this.get("on")); }
    });
    
    var BallView = Backbone.View.extend({
        template: _.template($("#ball-template").html()),       
        initialize: function(){
            this.model.bind('change', this.render, this);
            this.model.bind('destroy', this.remove, this);
        },
        render: function(){
            this.$el.html(this.template(this.model.toJSON()));
            return this;
        },
        remove: function(){
            this.$el.remove();
        }
    });
    
    var World = (function(){
        var gravity = { x: 0, y: -0.01 };
        var delta = [0, 0];
        var stage = [window.screenX, window.screenY, window.innerWidth, window.innerHeight];
        var walls = [];
        var balls = [];
        return {
            'init' : function(){
                
            },
            'reset' : function(){
                
            },
            'shake' : function(x, y, w, h){
                
            },
            'roll' : function(beta, gamma){
                if (beta) {
                    gravity.x = Math.sin(gamma * Math.PI / 180);
                    gravity.y = Math.sin((Math.PI / 4) + beta * Math.PI / 180);
                }       
            },
            'join' : function(){
                
            },
        };
    })();

    var AppEvent = {};
    _.extend(AppEvent, Backbone.Events);
    
    (function(){
        
        var createMode = false;
        var destroyMode = false;
    
        var isMouseDown = false;
        var mouseJoint = null;
        var mouseOver = null;
        var mouse = { x: 0, y: 0 };
        var timeOfLastTouch = 0;

        getBrowserDimensions();

        function getBrowserDimensions() {
            var changed = false;
            if (stage[0] != window.screenX) {
                delta[0] = (window.screenX - stage[0]) * 50;
                stage[0] = window.screenX;
                changed = true;
            }
            if (stage[1] != window.screenY) {
                delta[1] = (window.screenY - stage[1]) * 50;
                stage[1] = window.screenY;
                changed = true;
            }
            if (stage[2] != window.innerWidth) {
                stage[2] = window.innerWidth;
                changed = true;
            }
            if (stage[3] != window.innerHeight) {
                stage[3] = window.innerHeight;
                changed = true;
            }
            return changed;
        }
    
        function mouseDrag() {
            // mouse press
            if (createMode) {
                // createBall( mouse.x, mouse.y );
            } else if (isMouseDown && !mouseJoint) {
                var body = getBodyAtMouse();
                if (body) {
                    var md = new b2MouseJointDef();
                    md.body1 = world.m_groundBody;
                    md.body2 = body;
                    md.target.Set(mouse.x, mouse.y);
                    md.maxForce = 300 * body.m_mass;
                    md.timeStep = timeStep;
                    mouseJoint = world.CreateJoint(md);
                    body.WakeUp();
                } else {
                    // createMode = true;
                }
            }
            // mouse release
            if (!isMouseDown) {
                createMode = false;
                destroyMode = false;
                if (mouseJoint) {
                    world.DestroyJoint(mouseJoint);
                    mouseJoint = null;
                }
            }
            // mouse drag move
            if (mouseJoint) {
                var p2 = new b2Vec2(mouse.x, mouse.y);
                mouseJoint.SetTarget(p2);
            } else {
                // mouse non-drag move :: mouse-over
                var body = getBodyAtMouse();
                if (body) {
                    var i = bodies.indexOf(body);
                    if (mouseOver == null) {
                        mouseIn(i);
                    } else if (mouseOver != i) {
                        mouseOut(mouseOver);
                        mouseIn(i);
                    } else {
                        // still on the same body .. noop
                    }
                    mouseOver = i;
                } else {
                    if (mouseOver != null) {
                        mouseOut(mouseOver);
                        mouseOver = null;
                    }
                }
            }
        }

        function loop() {
            if (getBrowserDimensions()) {
                setWalls();
            }

            delta[0] += (0 - delta[0]) >> 1;
            delta[1] += (0 - delta[1]) >> 1;

            world.m_gravity.x = gravity.x * 350 + delta[0];
            world.m_gravity.y = gravity.y * 350 + delta[1];

            mouseDrag();

            world.Step(timeStep, iterations);

            for (i = 0; i < bodies.length; i++) {
                var body = bodies[i];
                var element = elements[i];
                element.style.left = (body.m_position0.x - (element.width >> 1)) + 'px';
                element.style.top = (body.m_position0.y - (element.height >> 1)) + 'px';
            }
        }

        return {
            el: document,
            events: {
                'mousedown'         : 'mouseDown',
                'mouseup'           : 'mouseUp',
                'mousemove'         : 'mouseMove',
                'dblclick'          : 'doubleClick',
                'touchstart'        : 'touchStart',
                'touchmove'         : 'touchMove',
                'touchend'          : 'touchEnd',
                'orientationchange' : 'orientation'
            },
            initialize: function(){ 
                setInterval(loop, 1000 / 40);
            },
            render: function(){
            },
            reset: function(){
            },
            mouseDown: function() {
                isMouseDown = true;
                return false;
            },
            mouseUp: function() {
                isMouseDown = false;
                return false;
            },
            mouseMove: function(event) {
                mouse.x = event.clientX;
                mouse.y = event.clientY;
            },
            doubleClick: function() {
                reset();
            },
            touchStart: function(event) {
                if (event.touches.length == 1) {
                    event.preventDefault();
                    // Faking double click for touch devices
                    var now = new Date().getTime();
                    if (now - timeOfLastTouch < 250) {
                        reset();
                        return;
                    }
                    timeOfLastTouch = now;
                    mouse.x = event.touches[0].pageX;
                    mouse.y = event.touches[0].pageY;
                    isMouseDown = true;
                }
            },
            touchMove: function(event) {
                if (event.touches.length == 1) {
                    event.preventDefault();
                    mouse.x = event.touches[0].pageX;
                    mouse.y = event.touches[0].pageY;
                }
            },
            touchEnd: function(event) {
                if (event.touches.length == 0) {
                    event.preventDefault();
                    isMouseDown = false;
                }
            },
            orientation: function(event) {
                if (event.beta) {
                    gravity.x = Math.sin(event.gamma * Math.PI / 180);
                    gravity.y = Math.sin((Math.PI / 4) + event.beta * Math.PI / 180);
                }
            }
        };
    })());
    
    // var appView = new AppView();
    */

    // ----
    
    var themes = [
    ["#10222B", "#95AB63", "#BDD684", "#E2F0D6", "#F6FFE0"],
    ["#362C2A", "#732420", "#BF734C", "#FAD9A0", "#736859"],
    ["#0D1114", "#102C2E", "#695F4C", "#EBBC5E", "#FFFBB8"],
    ["#2E2F38", "#FFD63E", "#FFB54B", "#E88638", "#8A221C"],
    ["#121212", "#E6F2DA", "#C9F24B", "#4D7B85", "#23383D"],
    ["#343F40", "#736751", "#F2D7B6", "#BFAC95", "#8C3F3F"],
    ["#000000", "#2D2B2A", "#561812", "#B81111", "#FFFFFF"],
    ["#333B3A", "#B4BD51", "#543B38", "#61594D", "#B8925A"]
    ];
    var theme = themes[Math.random() * themes.length >> 0];

    var createMode = false;
    var destroyMode = false;

    var isMouseDown = false;
    var mouseJoint = null;
    var mouseOver = null;
    var mouse = { x: 0, y: 0 };
    var timeOfLastTouch = 0;

    function mouseDown() {
        isMouseDown = true;
        return false;
    }
    function mouseUp() {
        isMouseDown = false;
        return false;
    }
    function mouseMove(event) {
        mouse.x = event.clientX;
        mouse.y = event.clientY;
    }
    function doubleClick() {
        reset();
    }
    function touchStart(event) {
        if (event.touches.length == 1) {
            event.preventDefault();
            // Faking double click for touch devices
            var now = new Date().getTime();
            if (now - timeOfLastTouch < 250) {
                reset();
                return;
            }
            timeOfLastTouch = now;
            mouse.x = event.touches[0].pageX;
            mouse.y = event.touches[0].pageY;
            isMouseDown = true;
        }
    }
    function touchMove(event) {
        if (event.touches.length == 1) {
            event.preventDefault();
            mouse.x = event.touches[0].pageX;
            mouse.y = event.touches[0].pageY;
        }
    }
    function touchEnd(event) {
        if (event.touches.length == 0) {
            event.preventDefault();
            isMouseDown = false;
        }
    }
    function orientation(event) {
        if (event.beta) {
            gravity.x = Math.sin(event.gamma * Math.PI / 180);
            gravity.y = Math.sin((Math.PI / 4) + event.beta * Math.PI / 180);
        }
    }
    function mouseDrag() {
        // mouse press
        if (createMode) {
            // createBall( mouse.x, mouse.y );
        } else if (isMouseDown && !mouseJoint) {
            var body = getBodyAtMouse();
            if (body) {
                var md = new b2MouseJointDef();
                md.body1 = world.m_groundBody;
                md.body2 = body;
                md.target.Set(mouse.x, mouse.y);
                md.maxForce = 300 * body.m_mass;
                md.timeStep = timeStep;
                mouseJoint = world.CreateJoint(md);
                body.WakeUp();
            } else {
                // createMode = true;
            }
        }
        // mouse release
        if (!isMouseDown) {
            createMode = false;
            destroyMode = false;
            if (mouseJoint) {
                world.DestroyJoint(mouseJoint);
                mouseJoint = null;
            }
        }
        // mouse drag move
        if (mouseJoint) {
            var p2 = new b2Vec2(mouse.x, mouse.y);
            mouseJoint.SetTarget(p2);
        } else {
            // mouse non-drag move :: mouse-over
            var body = getBodyAtMouse();
            if (body) {
                var i = bodies.indexOf(body);
                if (mouseOver == null) {
                    mouseIn(i);
                } else if (mouseOver != i) {
                    mouseOut(mouseOver);
                    mouseIn(i);
                } else {
                    // still on the same body .. noop
                }
                mouseOver = i;
            } else {
                if (mouseOver != null) {
                    mouseOut(mouseOver);
                    mouseOver = null;
                }
            }
        }
    }

    function bindEvents() {
        document.onmousedown = mouseDown;
        document.onmouseup = mouseUp;
        document.onmousemove = mouseMove;
        document.ondblclick = doubleClick;

        document.addEventListener('touchstart', touchStart, false);
        document.addEventListener('touchmove', touchMove, false);
        document.addEventListener('touchend', touchEnd, false);

        window.addEventListener('deviceorientation', orientation, false);
    }

    function mouseIn(i) {
        // console.log("mouse in %s", i);
        //elements[i].draw("#FFFFFF");
    }

    function mouseOut(i) {
        // console.log("mouse out %s", i);
        //elements[i].draw();
    }

    // BROWSER WINDOW
    
    var delta = [0, 0];
    var stage = [window.screenX, window.screenY, window.innerWidth, window.innerHeight];
    getBrowserDimensions();
    
    function getBrowserDimensions() {
        var changed = false;
        if (stage[0] != window.screenX) {
            delta[0] = (window.screenX - stage[0]) * 50;
            stage[0] = window.screenX;
            changed = true;
        }
        if (stage[1] != window.screenY) {
            delta[1] = (window.screenY - stage[1]) * 50;
            stage[1] = window.screenY;
            changed = true;
        }
        if (stage[2] != window.innerWidth) {
            stage[2] = window.innerWidth;
            changed = true;
        }
        if (stage[3] != window.innerHeight) {
            stage[3] = window.innerHeight;
            changed = true;
        }
        return changed;
    }

    // ----
    
    var worldAABB, world, iterations = 1, timeStep = 1 / 20;

    var walls = [];
    var wall_thickness = 200;
    var wallsSetted = false;

    var bodies = [];
    var elements = [];
    // var text = null;
    var gravity = { x: 0, y: -0.01 };

    var PI2 = Math.PI * 2;

    //

    function createWorld() {
        // init box2d
        worldAABB = new b2AABB();
        worldAABB.minVertex.Set( - 200, -200);
        worldAABB.maxVertex.Set(window.innerWidth + 200, window.innerHeight + 200);
        return new b2World(worldAABB, new b2Vec2(0, 0), true);
    }

    var canvas = null;

    //

    init();
    play();

    function init() {
        canvas = document.getElementById('canvas');

        bindEvents();
        world = createWorld();

        setWalls();
        reset();
    }

    function reset() {
        if (bodies) {
            for (var i = 0; i < bodies.length; i++) {
                var body = bodies[i];
                canvas.removeChild(body.GetUserData().element);
                world.DestroyBody(body);
                body = null;
            }
        }
        // color theme
        theme = themes[Math.random() * themes.length >> 0];
        document.body.style['backgroundColor'] = theme[0];

        bodies = [];
        elements = [];
        createInstructions();

        for (var i = 0; i < 10; i++) {
            createBall();
        }
    }

    function play() {
        setInterval(loop, 1000 / 40);
    }

    function loop() {
        if (getBrowserDimensions()) {
            setWalls();
        }

        delta[0] += (0 - delta[0]) >> 1;
        delta[1] += (0 - delta[1]) >> 1;

        world.m_gravity.x = gravity.x * 350 + delta[0];
        world.m_gravity.y = gravity.y * 350 + delta[1];

        mouseDrag();

        world.Step(timeStep, iterations);

        for (i = 0; i < bodies.length; i++) {
            var body = bodies[i];
            var element = elements[i];
            element.style.left = (body.m_position0.x - (element.width >> 1)) + 'px';
            element.style.top = (body.m_position0.y - (element.height >> 1)) + 'px';
            // rotate text
            // if (element.tagName == 'DIV') {
            //   var rotationStyle = 'rotate(' + (body.m_rotation0 * 57.2957795) + 'deg)';
            //   text.style.WebkitTransform = rotationStyle;
            //   text.style.MozTransform = rotationStyle;
            //   text.style.OTransform = rotationStyle;
            //   text.style.msTransform = rotationStyle;
            // }
        }
    }

    // .. BOX2D UTILS
    function drawCircle(canvas, size, color) {
        canvas.width = size;
        canvas.height = size;
        var graphics = canvas.getContext('2d');
        graphics.fillStyle = color;
        graphics.beginPath();
        graphics.arc(size >> 1, size >> 1, size >> 1, 0, PI2, true);
        graphics.closePath();
        graphics.fill();
        // color strip
        // var num_circles = Math.random() * 10 >> 0;
        //for (var i = size; i > 0; i-= (size/num_circles)) {
        //  graphics.fillStyle = theme[ (Math.random() * 4 >> 0) + 1];
        //  graphics.beginPath();
        //  graphics.arc(size >> 1, size >> 1, i >> 1, 0, PI2, true); 
        //  graphics.closePath();
        //  graphics.fill();
        //}
    }

    function createCircleBody(element, size, x, y) {
        var circle = new b2CircleDef();
        circle.radius = (size >> 1);
        circle.density = 1;
        circle.friction = 0.3;
        circle.restitution = 0.3;

        var b2body = new b2BodyDef();
        b2body.AddShape(circle);
        b2body.userData = {
            element: element
        };

        b2body.position.Set(x, y);
        b2body.linearVelocity.Set(Math.random() * 400 - 200, Math.random() * 400 - 200);

        return world.CreateBody(b2body);
    }

    function createInstructions() {
        var size = 250;
        var element = document.createElement('div');
        element.size = size;
        // ***
        element.color = theme[3];
        // ***
        element.width = size;
        element.height = size;
        element.style.position = 'absolute';
        element.style.left = -200 + 'px';
        element.style.top = -200 + 'px';
        element.style.cursor = "default";

        var circle = document.createElement('canvas');
        drawCircle(circle, size, element.color);
        element.appendChild(circle);

        var text = document.createElement('div');
        text.onSelectStart = null;
        text.innerHTML = '<span style="color:' + theme[0] + ';font-size:40px;">Hello!</span><br /><br /><span style="font-size:15px;"><strong>This is how it works:</strong><br /><br />1. Drag a ball.<br />2.&nbsp;Click&nbsp;on&nbsp;the&nbsp;background.<br />3. Shake your browser.<br />4. Double click.<br />5. Play!</span>';
        text.style.color = theme[1];
        text.style.position = 'absolute';
        text.style.left = '0px';
        text.style.top = '0px';
        text.style.fontFamily = 'Georgia';
        text.style.textAlign = 'center';
        element.appendChild(text);

        canvas.appendChild(element);

        text.style.left = ((size - text.clientWidth) >> 1) + 'px';
        text.style.top = ((size - text.clientHeight) >> 1) + 'px';

        elements.push(element);
        bodies.push(createCircleBody(element, size + 10, Math.random() * stage[2], Math.random() * -200));
    }

    function createBall(x, y) {
        var x = x || Math.random() * stage[2];
        var y = y || Math.random() * -200;

        var size = (Math.random() * 100 >> 0) + 20;

        var element = document.createElement("canvas");
        element.size = size;
        // ***
        element.color = theme[(Math.random() * 4 >> 0) + 1];
        // ***
        element.width = size;
        element.height = size;
        element.style['position'] = 'absolute';
        element.style['left'] = -200 + 'px';
        element.style['top'] = -200 + 'px';

        drawCircle(element, size, element.color);

        canvas.appendChild(element);
        elements.push(element);
        bodies.push(createCircleBody(element, size + 10, x, y));
    }

    function createBox(world, x, y, width, height, fixed) {
        if (typeof(fixed) == 'undefined') {
            fixed = true;
        }
        var boxSd = new b2BoxDef();
        if (!fixed) {
            boxSd.density = 1.0;
        }
        boxSd.extents.Set(width, height);
        var boxBd = new b2BodyDef();
        boxBd.AddShape(boxSd);
        boxBd.position.Set(x, y);
        return world.CreateBody(boxBd);
    }

    function getBodyAtMouse() {
        // Make a small box.
        var mousePVec = new b2Vec2();
        mousePVec.Set(mouse.x, mouse.y);
        var aabb = new b2AABB();
        aabb.minVertex.Set(mouse.x - 1, mouse.y - 1);
        aabb.maxVertex.Set(mouse.x + 1, mouse.y + 1);
        // Query the world for overlapping shapes.
        var k_maxCount = 10;
        var shapes = new Array();
        var count = world.Query(aabb, shapes, k_maxCount);
        var body = null;
        for (var i = 0; i < count; ++i) {
            if (shapes[i].m_body.IsStatic() == false) {
                if (shapes[i].TestPoint(mousePVec)) {
                    body = shapes[i].m_body;
                    break;
                }
            }
        }
        return body;
    }

    function setWalls() {
        if (wallsSetted) {
            world.DestroyBody(walls[0]);
            world.DestroyBody(walls[1]);
            world.DestroyBody(walls[2]);
            world.DestroyBody(walls[3]);
            walls[0] = null;
            walls[1] = null;
            walls[2] = null;
            walls[3] = null;
        }
        walls[0] = createBox(world, stage[2] / 2, -wall_thickness, stage[2], wall_thickness);
        walls[1] = createBox(world, stage[2] / 2, stage[3] + wall_thickness, stage[2], wall_thickness);
        walls[2] = createBox(world, -wall_thickness, stage[3] / 2, wall_thickness, stage[3]);
        walls[3] = createBox(world, stage[2] + wall_thickness, stage[3] / 2, wall_thickness, stage[3]);
        wallsSetted = true;
    }

});
